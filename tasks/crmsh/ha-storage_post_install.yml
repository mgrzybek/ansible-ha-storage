---

- name: Post-Install | crmsh | Get resources list
  command: crm configure show
  changed_when: False
  register: crm_config
  run_once: true

# Cluster stuff
- name: Post-Install | crmsh | Set clvm and dlm resources
  run_once: true
  when:
  - ha_storage_fs | lower != 'zfs'
  - ha_storage_use_clvm | lower == 'true'
  command: >
    crm -w script run cloned_clvm \
      size={{ ha_storage_cluster_nodes.stdout }} \
      attribute_name={{ ha_storage_cluster_attribute_name }} \
      attribute_value={{ ha_storage_cluster_attribute_value }}

- name: Post-Install | crmsh | Set ocfs2 resource
  command: crm script run cloned_o2cb
  run_once: true
  #when: '"ocfs2" in ha_storage.filesystems|json_query("fstype")'
  when: ha_storage_fs | lower == 'ocfs2'

# TODO: Set aliases in multipath.conf

######################################
# Deploy storage

# Openstack cinder devices
- name: Post-Install | crmsh | Openstack Cinder resources
  run_once: true
  when:
  - ha_storage.cinder_volumes is defined
  - ha_storage.openrc is defined
  - crm_config.stdout.find('g-' + ha_storage.volume_group) < 0
  block:
  - name: Post-Install | crmsh | Locate Openstack Cinder resources
    command: crm_resource --locate --resource {{ ha_storage.volume_group }}-cinder
    changed_when: False
    failed_when: False
    register: crm_locate_result

  - name: Post-Install | crmsh | Deploy Openstack Cinder resources
    when: crm_locate_result.rc != 0
    shell: >
      {% if ha_storage.cinder_volumes | length > 1 %}
          crm configure primitive {{ ha_storage.volume_group }}-cinder ocf:heartbeat:openstack-cinder-volumes \
              params \
                  volume_ids={{ ha_storage.cinder_volumes | map('quote') | join(',') }} \
                  minimum_volumes_number={{ ha_storage.cinder_volumes | length - 1 }} \
      {% else %}
          crm configure primitive {{ ha_storage.volume_group }}-cinder ocf:heartbeat:openstack-cinder-volume \
              params \
                  volume_id={{ ha_storage.cinder_volumes[0] }} \
      {% endif %}
                  openrc={{ ha_storage.openrc }}

  - name: Post-Install | crmsh | Sleep for 60 seconds and continue with play
    wait_for: timeout=60
    delegate_to: localhost
    run_once: true
    become: false

  - name: Post-Install | crmsh | Wait for the Cinder resource to be running
    changed_when: False
    register: cinder_location
    until: cinder_location.stdout.find('is running on') > -1
    retries: 6
    delay: 10
    run_once: true
    shell: >
      crm_resource --locate --resource {{ ha_storage.volume_group }}-cinder \
          || exit 0

#
# 1. a. pvcreate
#    b. vgcreate
#

- name: Post-Install | crmsh | Physical volume group building
  when:
  - not ha_storage.cinder_volumes is defined
  - not ha_storage.openrc is defined
  block:
  - name: Post-Install | crmsh | Check luns availability
    command: fdisk -l {{ ha_storage|json_query("luns[*].id")|join(" ") }}
    changed_when: False
    failed_whon: False
    register: fdisk_luns_result

  - when: fdisk_luns_result.stderr_lines | length == 0
    block:
    - set_fact:
        create_datasets: true

    - name: Post-Install | crmsh | VG create
      when:
      - ha_storage_fs | lower != 'zfs'
      lvg:
        vg: '{{ ha_storage.volume_group }}'
        pvs: '{{ ha_storage|json_query("luns[*].id")|join(",") }}'
        vg_options: '{{ vg_options }}'

    - name: Post-Install | crmsh | zpool create
      when:
      - ha_storage_fs | lower == 'zfs'
      block:
      - name: Post-Install | crmsh | Check zpool
        command: crm_resource --locate --resource {{ ha_storage.volume_group }}_z
        changed_when: False
        failed_when: False
        register: crm_locate_result

      - name: Post-Install | crmsh | Create zpool
        when: crm_locate_result.rc != 0
        command: >
          zpool create -R {{ ha_storage_zpool_mountpoint }} \
            {{ ha_storage.volume_group }} \
            raidz1 \
            {{ ha_storage|json_query("luns[*].id")|join(" ") }}

- name: Post-Install | crmsh | Cinder volume group building
  when:
  - ha_storage.cinder_volumes is defined
  - ha_storage.openrc is defined
  block:
#    - name: Post-Install | crmsh | Locate the cinder volume
#      shell: crm_resource --locate --resource {{ ha_storage.volume_group }}-cinder | awk '{print $NF}'
#      register: crm_resource_locate_cinder
#      run_once: true

  - name: Post-Install | crmsh | Check if LVM physical volume already exists
    when: ha_storage_fs | lower != 'zfs'
    changed_when: False
    register: pvs_result
    command: pvs

    # The device id is generated using the last 20 characters of the cinder id
    # We build a comma-separated list of devices
  - name: Post-Install | crmsh | We build a comma-separated list of devices
    set_fact:
      temp_virtio_id_devices: '{% for id in ha_storage.cinder_volumes %}/dev/disk/by-id/virtio-{{ id[:20] }},{% endfor %}'

    # We clean the last comma of the list
  - name: Post-Install | crmsh | We clean the last comma of the list
    set_fact:
      virtio_id_devices: '{{ temp_virtio_id_devices[:-1] }}'

    # TODO: use fdisk
  - name: Post-Install | crmsh | Check volumes availability
    changed_when: False
    failed_when: False
    register: ls_cinder_result
    command: ls {{ virtio_id_devices | regex_replace(',', ' ') }}

  - when: ls_cinder_result.stderr_lines | length == 0
    name: Post-Install | crmsh | Set local fact (create_datasets = true)
    set_fact:
      create_datasets: true

  - when:
    - create_datasets == true
#        - crm_resource_locate_cinder.stdout.find(ansible_hostname) > -1
    block:
    - name: Post-Install | crmsh | VG create
      when:
      - ha_storage_fs | lower != 'zfs'
      - pvs_result.stdout.find(ha_storage.volume_group) < 0
      lvg:
        vg: '{{ ha_storage.volume_group }}'
        pvs: '{{ virtio_id_devices }}'
        vg_options: '{{ vg_options }}'

    - name: Post-Install | crmsh | zpool create
      when:
      - ha_storage_fs | lower == 'zfs'
      block:
      - name: Post-Install | crmsh | Check zpool
        command: crm_resource --locate --resource {{ ha_storage.volume_group }}_z
        changed_when: False
        failed_when: False
        register: crm_locate_result

      - name: Post-Install | crmsh | Create zpool
        when: crm_locate_result.rc != 0
        command: >
          zpool create -R {{ ha_storage_zpool_mountpoint }} \
            {{ ha_storage.volume_group }} \
            raidz1 \
            {{ ha_storage|json_query("luns[*].id")|join(" ") }}
            
# 2. a. lvcreate
#    b. mkfs
- name: Post-Install | crmsh | Create the dataseets
  when:
  - ha_storage.filesystems is defined
  - ha_storage.filesystems | length > 0
  - create_datasets | lower == 'true'
  block:
  - when:
    - ha_storage_fs | lower != 'zfs'
    include_tasks: ha-storage_post_install_lvm_volume.yml
    with_items: '{{ ha_storage.filesystems }}'

  - when:
    - ha_storage_fs | lower == 'zfs'
    include_tasks: ../ha-storage_post_install_zfs_dataset.yml
    with_items: '{{ ha_storage.filesystems }}'

#
# 3. a. create crm script
#    b. run the srcipt
- name: Post-Install | crmsh | Install some crm scripts (directories)
  file: path={{ ha_storage_crm_scripts_root_path }}/{{ ha_storage.volume_group }} state=directory

- name: Post-Install | crmsh | Install some crm scripts (files)
  template: src=group_clustered_vg.yml.j2 dest={{ ha_storage_crm_scripts_root_path }}/{{ ha_storage.volume_group }}/main.yml

- name: Post-Install | crmsh | Create the resources
  command: crm -w script run {{ ha_storage.volume_group }}
  run_once: true
