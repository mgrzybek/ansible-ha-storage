---

- name: Get resources list
  shell: crm configure show
  register: crm_config
  run_once: true

# Cluster stuff
- name: Set clvm and dlm resources
  shell: >
    crm -w script run cloned_clvm \
      size={{ ha_storage_cluster_nodes.stdout }} \
      attribute_name={{ ha_storage_cluster_attribute_name }} \
      attribute_value={{ ha_storage_cluster_attribute_value }}
  when:
    - ha_storage_fs | lower != 'zfs'
    - ha_storage_use_clvm == true
  run_once: true

- name: Set ocfs2 resource
  shell: crm script run cloned_o2cb
  run_once: true
  #when: '"ocfs2" in ha_storage.filesystems|json_query("fstype")'
  when:  ha_storage_fs |Â lower == 'ocfs2'

# Set aliases in multipath.conf

# Discover VG

######################################
# Deploy storage

# Openstack cinder devices
- name: Openstack Cinder resources
  block:
    - name: Get the existing block devices from /dev
      shell: ls /dev/vd? | tr ' ' '\n'
      register: pre_cinder_bloc_devices

    - name: Openstack Cinder resources (mono-volume)
      shell: >
        crm configure primitive {{ ha_storage.volume_group }}-cinder openstack-cinder-volume \
            params \
                openrc={{ ha_storage.openrc }} \
                volume_id={{ item }}
      with_items: "{{ ha_storage.cinder_volumes }}"
      run_once: true
      when:
        - ha_storage.cinder_volumes | length == 1

    - name: Openstack Cinder resources (multi-volumes)
      shell: >
        crm configure primitive {{ ha_storage.volume_group }}-cinder openstack-cinder-volumes \
            params \
                openrc={{ ha_storage.openrc }} \
                volume_ids={{ ha_storage.cinder_volumes | map('quote') | join(',') }} \
                minimum_volumes_number={{ ha_storage.cinder_volumes | length - 1 }}
      run_once: true
      when:
        - ha_storage.cinder_volumes | length > 1

    - name: Wait for the Cinder resource to be running
      shell: >
          crm_resource --locate --resource {{ ha_storage.volume_group }}-cinder \
              || exit 0
      register: cinder_location
      until: cinder_location.stdout.find('is running on') > -1
      retries: 6
      delay: 10
      run_once: true

    - name: Sleep for 60 seconds and continue with play
      wait_for: timeout=60
      delegate_to: localhost
      run_once: true

    - name: Get the existing block devices from /dev
      shell: ls /dev/vd? | tr ' ' '\n'
      register: post_cinder_bloc_devices

  when:
    - ha_storage.cinder_volumes is defined
    - ha_storage.openrc is defined
    - crm_config.stdout.find('g-' + ha_storage.volume_group) < 0
#
# 1. a. pvcreate
#    b. vgcreate
#

- set_fact:
    create_datasets: false

- name: Physical volume group building
  block:
    - name: Check luns availability
      shell: ls {{ ha_storage|json_query("luns[*].id")|join(" ") }} || exit 0
      register: ls_luns_result

    - set_fact:
        create_datasets: true
      when: ls_luns_result.stderr_lines | length == 0

    - name: VG create
      lvg:
          vg: "{{ ha_storage.volume_group }}"
          pvs: '{{ ha_storage|json_query("luns[*].id")|join(",") }}'
          vg_options: "{{ vg_options }}"
      when:
        - ha_storage_fs | lower != 'zfs'
        - ls_luns_result.stderr_lines | length == 0

    - name: zpool create
      shell: >
        crm_resource --locate --resource {{ ha_storage.volume_group }}_z || \
        zpool create -R {{ ha_storage_zpool_mountpoint }} \
            {{ ha_storage.volume_group }} \
            raidz1 \
            {{ ha_storage|json_query("luns[*].id")|join(" ") }}
      when:
          - ha_storage_fs | lower == 'zfs'
          - ls_luns_result.stderr_lines | length == 0
      run_once: true
  when:
    - not ha_storage.cinder_volumes is defined
    - not ha_storage.openrc is defined

- name: Cinder volume group building
  block:
    - name: Locate the volumes
      shell: crm_resource --locate --resource {{ ha_storage.volume_group }}-cinder | awk '{print $NF}'
      register: crm_resource_locate_cinder
      run_once: true

    - name: Check if volume already exists
      shell: pvs
      register: pvs_result
      when: ha_storage_fs | lower != 'zfs'

    - set_fact:
        create_datasets: true
      when:
        - pre_cinder_bloc_devices.stdout_lines is defined
        - post_cinder_bloc_devices.stdout_lines|length > pre_cinder_bloc_devices.stdout_lines|length

    - name: VG create
      lvg: vg={{ ha_storage.volume_group }} pvs={{ post_cinder_bloc_devices.stdout_lines | difference(pre_cinder_bloc_devices.stdout_lines) | join(",") }} vg_options="{{ vg_options }}"
      #run_once: true
      when:
        - ha_storage_fs | lower != 'zfs'
        - crm_resource_locate_cinder.stdout.find(ansible_hostname) > -1
        - pvs_result.stdout.find(ha_storage.volume_group) < 0
        - create_datasets == true

    - name: zpool create
      shell: >
          crm_resource --locate --resource {{ ha_storage.volume_group }}_z || \
          zpool create -R {{ ha_storage_zpool_mountpoint }} \
              {{ ha_storage.volume_group }} \
              raidz1 \
              {{ post_cinder_bloc_devices.stdout_lines | difference(pre_cinder_bloc_devices.stdout_lines) | join(",") }}
      when:
        - ha_storage_fs | lower == 'zfs'
        - crm_resource_locate_cinder.stdout.find(ansible_hostname) > -1
        - create_datasets == true

  when:
    - ha_storage.cinder_volumes is defined
    - ha_storage.openrc is defined

# 2. a. lvcreate
#    b. mkfs
- name: Create the dataseets
  block:
    - include_tasks: ha-storage_post_install_lvm_volume.yml
      with_items: "{{ ha_storage.filesystems }}"
      when:
        - ha_storage_fs | lower != 'zfs'

    - include_tasks: ha-storage_post_install_zfs_dataset.yml
      with_items: "{{ ha_storage.filesystems }}"
      when:
        - ha_storage_fs | lower == 'zfs'
  when:
    - ha_storage.filesystems is defined
    - ha_storage.filesystems | length > 0
    - create_datasets == true

#
# 3. a. create crm script
#    b. run the srcipt
- name: Install some crm scripts (directories)
  file: path={{ ha_storage_crm_scripts_root_path }}/{{ ha_storage.volume_group }} state=directory

- name: Install some crm scripts (files)
  template: src=group_clustered_vg.yml.j2 dest={{ ha_storage_crm_scripts_root_path }}/{{ ha_storage.volume_group }}/main.yml

- name: Create the resources
  command: crm -w script run {{ ha_storage.volume_group }}
  run_once: true
