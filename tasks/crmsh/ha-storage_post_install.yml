---

- name: Get resources list
  shell: crm configure show
  register: crm_config
  run_once: true

# Cluster stuff
- name: Set clvm and dlm resources
  run_once: true
  when:
    - ha_storage_fs | lower != 'zfs'
    - ha_storage_use_clvm == true
  shell: >
    crm -w script run cloned_clvm \
      size={{ ha_storage_cluster_nodes.stdout }} \
      attribute_name={{ ha_storage_cluster_attribute_name }} \
      attribute_value={{ ha_storage_cluster_attribute_value }}

- name: Set ocfs2 resource
  shell: crm script run cloned_o2cb
  run_once: true
  #when: '"ocfs2" in ha_storage.filesystems|json_query("fstype")'
  when:  ha_storage_fs | lower == 'ocfs2'

# Set aliases in multipath.conf

# Discover VG

######################################
# Deploy storage

# Openstack cinder devices
- name: Openstack Cinder resources
  run_once: true
  when:
    - ha_storage.cinder_volumes is defined
    - ha_storage.openrc is defined
    - crm_config.stdout.find('g-' + ha_storage.volume_group) < 0
  block:
    - name: Openstack Cinder resources (multi-volumes)
      shell: >
        crm_resource --locate --resource {{ ha_storage.volume_group }}-cinder || \
        {% ha_storage.cinder_volumes | length > 1 %}
            crm configure primitive {{ ha_storage.volume_group }}-cinder ocf:heartbeat:openstack-cinder-volumes \
                params \
                    volume_ids={{ ha_storage.cinder_volumes | map('quote') | join(',') }} \
                    minimum_volumes_number={{ ha_storage.cinder_volumes | length - 1 }} \
        {% else %}
            crm configure primitive {{ ha_storage.volume_group }}-cinder ocf:heartbeat:openstack-cinder-volume \
                params \
                    volume_id={{ ha_storage.cinder_volumes[0] }} \
        {% endif %}
                    openrc={{ ha_storage.openrc }}

    - name: Sleep for 60 seconds and continue with play
      wait_for: timeout=60
      delegate_to: localhost
      run_once: true
      become: false

    - name: Wait for the Cinder resource to be running
      shell: >
          crm_resource --locate --resource {{ ha_storage.volume_group }}-cinder \
              || exit 0
      register: cinder_location
      until: cinder_location.stdout.find('is running on') > -1
      retries: 6
      delay: 10

#
# 1. a. pvcreate
#    b. vgcreate
#

- name: Physical volume group building
  block:
    - name: Check luns availability
      shell: fdisk -l {{ ha_storage|json_query("luns[*].id")|join(" ") }} || exit 0
      register: fdisk_luns_result

    - set_fact:
        create_datasets: true
      when: fdisk_luns_result.stderr_lines | length == 0

    - name: VG create
      lvg:
          vg: "{{ ha_storage.volume_group }}"
          pvs: '{{ ha_storage|json_query("luns[*].id")|join(",") }}'
          vg_options: "{{ vg_options }}"
      when:
        - ha_storage_fs | lower != 'zfs'
        - fdisk_luns_result.stderr_lines | length == 0

    - name: zpool create
      shell: >
        crm_resource --locate --resource {{ ha_storage.volume_group }}_z || \
        zpool create -R {{ ha_storage_zpool_mountpoint }} \
            {{ ha_storage.volume_group }} \
            raidz1 \
            {{ ha_storage|json_query("luns[*].id")|join(" ") }}
      when:
          - ha_storage_fs | lower == 'zfs'
          - fdisk_luns_result.stderr_lines | length == 0

  when:
    - not ha_storage.cinder_volumes is defined
    - not ha_storage.openrc is defined

- name: Cinder volume group building
  block:
    - name: Locate the cinder volume
      shell: crm_resource --locate --resource {{ ha_storage.volume_group }}-cinder | awk '{print $NF}'
      register: crm_resource_locate_cinder
      run_once: true

    - name: Check if LVM physical volume already exists
      shell: pvs
      register: pvs_result
      when: ha_storage_fs | lower != 'zfs'

    # The device id is generated using the last 20 characters of the cinder id
    # We build a comma-separated list of devices
    - set_fact:
        temp_virtio_id_devices: "{% for id in ha_storage.cinder_volumes %}/dev/disk/by-id/virtio-{{ id[:20] }},{% endfor %}"

    # We clean the last comma of the list
    - set_fact:
        virtio_id_devices: "{{ temp_virtio_id_devices[:-1] }}"

    - name: Check volumes availability
      shell: ls {{ virtio_id_devices | regex_replace(',', ' ') }} || exit 0
      register: ls_cinder_result

    - set_fact:
        create_datasets: true
      when: ls_cinder_result.stderr_lines | length == 0

    - name: VG create
      lvg:
        vg: "{{ ha_storage.volume_group }}"
        pvs: "{{ virtio_id_devices }}"
        vg_options: "{{ vg_options }}"
      when:
        - ha_storage_fs | lower != 'zfs'
        - crm_resource_locate_cinder.stdout.find(ansible_hostname) > -1
        - pvs_result.stdout.find(ha_storage.volume_group) < 0
        - create_datasets | lower == 'true'

    - name: zpool create
      shell: >
          crm_resource --locate --resource {{ ha_storage.volume_group }}_z || \
          zpool create -R {{ ha_storage_zpool_mountpoint }} \
              {{ ha_storage.volume_group }} \
              raidz1 \
              {{ virtio_id_devices | regex_replace(',', ' ') }}
      when:
        - ha_storage_fs | lower == 'zfs'
        - crm_resource_locate_cinder.stdout.find(ansible_hostname) > -1
        - create_datasets == true

  when:
    - ha_storage.cinder_volumes is defined
    - ha_storage.openrc is defined

# 2. a. lvcreate
#    b. mkfs
- name: Create the dataseets
  block:
    - include_tasks: ha-storage_post_install_lvm_volume.yml
      with_items: "{{ ha_storage.filesystems }}"
      when:
        - ha_storage_fs | lower != 'zfs'

    - include_tasks: ha-storage_post_install_zfs_dataset.yml
      with_items: "{{ ha_storage.filesystems }}"
      when:
        - ha_storage_fs | lower == 'zfs'
  when:
    - ha_storage.filesystems is defined
    - ha_storage.filesystems | length > 0
    - create_datasets == true

#
# 3. a. create crm script
#    b. run the srcipt
- name: Install some crm scripts (directories)
  file: path={{ ha_storage_crm_scripts_root_path }}/{{ ha_storage.volume_group }} state=directory

- name: Install some crm scripts (files)
  template: src=group_clustered_vg.yml.j2 dest={{ ha_storage_crm_scripts_root_path }}/{{ ha_storage.volume_group }}/main.yml

- name: Create the resources
  command: crm -w script run {{ ha_storage.volume_group }}
  run_once: true
