---

- name: Get resources list
  shell: pcs config
  register: pcs_config
  run_once: true

# Cluster stuff
- name: Set clvm and dlm resources
  shell: >
    pcs resource create dlm controld \
        op monitor interval="60s" timeout="60s" \
        clone interleave=true ordered=true clone-max={{ ha_storage_cluster_nodes.stdout }} \
        --group g-clvm \
        --disabled && \
    pcs resource create clvm clvmd \
        op monitor interval="60s" timeout="60s" \
        --group g-clvm \
        --after dlm \
        --disabled && \
    pcs constraint location g-clvm rule \
        "{{ ha_storage_cluster_attribute_name }}" eq "{{ ha_storage_cluster_attribute_value }}" && \
    pcs resource enable g-clvm
  when:
    - ha_storage_fs | lower != 'zfs'
    - ha_storage_use_clvm == true
    - pcs_config.stdout.find('g-clvm') < 0
  run_once: true

#- name: Set ocfs2 resource
#  shell: crm script run cloned_o2cb
#  run_once: true
#  #when: '"ocfs2" in ha_storage.filesystems|json_query("fstype")'
#  when:  ha_storage_fs |Â lower == 'ocfs2'

# Set aliases in multipath.conf

# Discover VG

######################################
# Deploy storage

# Openstack cinder devices
- name: Openstack Cinder resources
  block:
    - name: Get the existing block devices from /dev
      shell: ls /dev/vd? | tr ' ' '\n'
      register: pre_cinder_bloc_devices

    - name: Openstack Cinder resources (mono-volume)
      shell: >
        pcs resource create {{ ha_storage.volume_group }}-cinder openstack-cinder-volume \
            openrc={{ ha_storage.openrc }} \
            volume_id={{ item }} \
            --group g-{{ ha_storage.volume_group }} \
            --disabled && \
        pcs resource create {{ ha_storage.volume_group }}-cinder-delay Delay \
            startdelay=10 \
            stopdelay=0 \
            mondelay=0 \
            --group g-{{ ha_storage.volume_group }} \
            --after {{ ha_storage.volume_group }}-cinder && \
        pcs constraint location g-{{ ha_storage.volume_group }} rule \
            "{{ ha_storage_cluster_attribute_name }}" eq "{{ ha_storage_cluster_attribute_value }}" && \
        pcs resource enable {{ ha_storage.volume_group }}-cinder
      with_items: "{{ ha_storage.cinder_volumes }}"
      run_once: true
      when:
        - ha_storage.cinder_volumes | length == 1

    - name: Openstack Cinder resources (multi-volumes)
      shell: >
        pcs resource create {{ ha_storage.volume_group }}-cinder openstack-cinder-volumes \
            openrc={{ ha_storage.openrc }} \
            volume_ids={{ ha_storage.cinder_volumes | map('quote') | join(',') }} \
            minimum_volumes_number={{ ha_storage.cinder_volumes | length - 1 }} \
            --group g-{{ ha_storage.volume_group }}
            --disabled && \
        pcs resource create {{ ha_storage.volume_group }}-cinder-delay Delay \
            startdelay=10 \
            stopdelay=0 \
            mondelay=0 \
            --group g-{{ ha_storage.volume_group }} \
            --after {{ ha_storage.volume_group }}-cinder && \
        pcs constraint location g-{{ ha_storage.volume_group }} rule \
            "{{ ha_storage_cluster_attribute_name }}" eq "{{ ha_storage_cluster_attribute_value }}" && \
        pcs resource enable {{ ha_storage.volume_group }}-cinder
      run_once: true
      when:
        - ha_storage.cinder_volumes | length > 1

    - name: Wait for the Cinder resource to be running
      shell: >
          crm_resource --locate --resource {{ ha_storage.volume_group }}-cinder \
              || exit 0
      register: cinder_location
      until: cinder_location.stdout.find('is running on') > -1
      retries: 6
      delay: 10
      run_once: true

    - name: Sleep for 60 seconds and continue with play
      wait_for: timeout=60
      delegate_to: localhost
      run_once: true
      become: false

    - name: Get the existing block devices from /dev
      shell: ls /dev/vd? | tr ' ' '\n'
      register: post_cinder_bloc_devices

  when:
    - ha_storage.cinder_volumes is defined
    - ha_storage.openrc is defined
    - pcs_config.stdout.find('g-' + ha_storage.volume_group) < 0

#
# 1. a. pvcreate
#    b. vgcreate
#
#
- set_fact:
    create_datasets: false

- name: Physical volume group building
  block:
    - name: Check luns availability
      shell: ls {{ ha_storage|json_query("luns[*].id")|join(" ") }} || exit 0
      register: ls_luns_result

    - set_fact:
        create_datasets: true
      when: ls_luns_result.stderr_lines | length == 0

    - name: VG create
      lvg:
          vg: "{{ ha_storage.volume_group }}"
          pvs: "{{ ha_storage|json_query('luns[*].id')|join(',') }}"
          vg_options: "{{ vg_options }}"
      when:
        - ha_storage_fs | lower != 'zfs'
        - ls_luns_result.stderr_lines | length == 0

    - name: zpool create
      shell: >
          crm_resource --locate --resource {{ ha_storage.volume_group }}_z || \
          zpool create -R {{ ha_storage_zpool_mountpoint }} \
              {{ ha_storage.volume_group }} \
              raidz1 \
              {{ ha_storage|json_query("luns[*].id")|join(" ") }}
      when:
        - ha_storage_fs | lower == 'zfs'
        - ls_luns_result.stderr_lines | length == 0

  when:
    - not ha_storage.cinder_volumes is defined
    - not ha_storage.openrc is defined

- name: Cinder volume group building
  block:
    - name: Locate the volumes
      shell: crm_resource --locate --resource {{ ha_storage.volume_group }}-cinder | awk '{print $NF}'
      register: crm_resource_locate_cinder
      run_once: true

    - name: Check if volume already exists
      shell: pvs
      register: pvs_result
      when: ha_storage_fs | lower != 'zfs'

    - set_fact:
        create_datasets: true
      when:
        - pre_cinder_bloc_devices.stdout_lines is defined
        - post_cinder_bloc_devices.stdout_lines|length > pre_cinder_bloc_devices.stdout_lines|length

    - name: VG create
      lvg:
        vg: "{{ ha_storage.volume_group }}"
        pvs: "{{ post_cinder_bloc_devices.stdout_lines | difference(pre_cinder_bloc_devices.stdout_lines) | join(',') }}"
        vg_options: "{{ vg_options }}"
      #run_once: true
      when:
        - ha_storage_fs | lower != 'zfs'
        - crm_resource_locate_cinder.stdout.find(ansible_hostname) > -1
        - pre_cinder_bloc_devices.stdout_lines is defined
        - pvs_result.stdout.find(ha_storage.volume_group) < 0

    - name: zpool create
      shell: >
          crm_resource --locate --resource {{ ha_storage.volume_group }}_z || \
          zpool create -R {{ ha_storage_zpool_mountpoint }} \
              {{ ha_storage.volume_group }} \
              raidz1 \
              {{ post_cinder_bloc_devices.stdout_lines | difference(pre_cinder_bloc_devices.stdout_lines) | join(",") }}
      when:
        - ha_storage_fs | lower == 'zfs'
        - crm_resource_locate_cinder.stdout.find(ansible_hostname) > -1
        - create_datasets == true

  when:
    - ha_storage.cinder_volumes is defined
    - ha_storage.openrc is defined

#
# 2. a. resource group
#
- name: Create resource group (LVM)
  block:
    - name: Create resource {{ ha_storage.volume_group }}-vg
      command: >
        pcs resource create {{ ha_storage.volume_group }}-vg LVM \
            volgrpname={{ ha_storage.volume_group }} \
            op monitor timeout=30 interval=10 \
            --group g-{{ ha_storage.volume_group }} \
            --disabled

    - name: Add constraint ({{ ha_storage_cluster_attribute_name }} == {{ ha_storage_cluster_attribute_value }})
      command: >
        pcs constraint location g-{{ ha_storage.volume_group }} \
            rule \
                "{{ ha_storage_cluster_attribute_name }}" \
                eq \
                "{{ ha_storage_cluster_attribute_value }}"
      when:
        - not ha_storage.cinder_volumes is defined

    - name: Add constraint (openstack_id is defined)
      command: >
        pcs constraint location g-{{ ha_storage.volume_group }} \
            rule \
                defined openstack_id
      when:
        - not ha_storage.cinder_volumes is defined

    - name: Enable {{ ha_storage.volume_group }}-vg
      command: >
        pcs resource enable {{ ha_storage.volume_group }}-vg

  when:
    - ha_storage_fs | lower != 'zfs'
    - pcs_config.stdout.find(ha_storage.volume_group + '-vg') < 0
  run_once: true

- name: Create resource group (ZFS)
  block:
    - name: Create resource {{ ha_storage.volume_group }}_z
      command: >
        pcs resource create {{ ha_storage.volume_group }}_z ZFS \
            pool={{ ha_storage.volume_group }} \
            op monitor timeout="30s" interval="10s" \
            op start timeout="30s" interval="0" \
            op stop timeout="30s" interval="0" \
            --disabled \
            --group g-{{ ha_storage.volume_group }}

    - name: Add constraint
      command: >
        pcs constraint location g-{{ ha_storage.volume_group }} \
            rule \
                "{{ ha_storage_cluster_attribute_name }}" \
                eq \
                "{{ ha_storage_cluster_attribute_value }}"
      when:
        - not ha_storage.cinder_volumes is defined

    - name: Enable {{ ha_storage.volume_group }}_z
      command: >
        pcs resource enable {{ ha_storage.volume_group }}_z

  when:
    - ha_storage_fs | lower == 'zfs'
    - pcs_config.stdout.find(ha_storage.volume_group + '_z') < 0
  run_once: true

- name: Locate the resource group
  shell: crm_resource --resource g-{{ ha_storage.volume_group }} --locate
  register: crm_resource_locate_group
  run_once: true

#
# sfex stuff
# not available on centos / rhel yet
#
- name: sfex configuration
  block:
    - name: Enable sfex daemon
      shell: >
        pcs resource create sfex sfex \
            op monitor timeout="30s" interval="10s" \
            op start timeout="30s" interval="0" \
            op stop timeout="30s" interval="0" \
            --disabled \
            --clone && \
        pcs constraint location  rule \
            "{{ ha_storage_cluster_attribute_name }}" eq "{{ ha_storage_cluster_attribute_value }}" && \
        pcs resource enable sfex
      when: pcs_config.stdout.find('sfex-clone') < 0

    - name: Create sfex volume
      lvol: vg={{ ha_storage.volume_group }} lv=sfex size=10M
      when:
        - ha_storage_fs | lower != 'zfs'

    - name: Create sfex volume
      shell: >
         zfs list |grep -q {{ ha_storage.volume_group }}/sfex || \
         zfs create "{{ ha_storage.volume_group }}/sfex" -o mountpoint=none
      when:
        - ha_storage_fs | lower == 'zfs'

    - name: Wait for the sfex resource to be running
      shell: >
          crm_resource --locate --resource sfex-clone \
              || exit 0
      register: cinder_location
      until: cinder_location.stdout.find('is running on') > -1
      retries: 6
      delay: 10

    - name: Configure sfex partition
      command: sfex_init /dev/{{ ha_storage.volume_group }}/sfex

    - name: Add sfex resource
      shell: >
        pcs resource create {{ ha_storage.volume_group }}-sfex \
            device="/dev/{{ ha_storage.volume_group }}/sfex" \
            collision_timeout=1 \
            monitor_interval=1 \
            op monitor timeout="30s" interval="10s" \
            op start timeout="30s" interval="0" \
            op stop timeout="30s" interval="0" \
            --group g-{{ ha_storage.volume_group }} \
            --after {{ ha_storage.volume_group }}-cinder-delay

  when:
    - ha_storage_use_sfex == true
    - ha_storage.cinder_volumes | length == 1
    - crm_resource_locate_group.stdout.find(ansible_hostname) > -1
    - pcs_config.stdout.find(ha_storage.volume_group + "sfex") < 0
    - ansible_os_family | lower != 'redhat'

# 3. a. lvcreate
#    b. add resource to group
#    c. mkfs
- name: Create the datasets
  block:
    #- name: Rescan storage
    #  command: lvscan

    - include_tasks: ha-storage_post_install_lvm_volume.yml
      with_items: "{{ ha_storage.filesystems }}"
      when:
        - ha_storage_fs | lower != 'zfs'

    - include_tasks: ha-storage_post_install_zfs_dataset.yml
      with_items: "{{ ha_storage.filesystems }}"
      when:
        - ha_storage_fs | lower == 'zfs'

  when:
    - ha_storage.filesystems is defined
    - ha_storage.filesystems | length > 0
    - crm_resource_locate_group.stdout.find(ansible_hostname) > -1

# Services
- name: Add the appending resources
  block:
    - name: Get group configuration
      command: pcs resource show g-{{ ha_storage.volume_group }}
      register: pcs_resource_show

    - name: Append resources to the group
      command: pcs resource group add g-{{ ha_storage.volume_group }} {{ item.name }}
      with_items: "{{ ha_storage.append_resources }}"
      when: pcs_resource_show.stdout.find(item.name + " (") < 0
 
  run_once: true
  when:
    - ha_storage.append_resources is defined
    - ha_storage.append_resources | length > 0
