---

- name: Locate the volume group resource "g-{{ ha_storage.volume_group }}"
  shell: >
    crm_resource --locate --resource "g-{{ ha_storage.volume_group }}" \
        | awk '{print $NF}' | sort -u
  register: crm_resource_locate_group
  run_once: true

- fail: msg="g-{{ ha_storage.volume_group }} cannot be running at several locations at the same time ({{ crm_resource_locate_group.stdout_lines | join(' ') }})"
  when:
    - crm_resource_locate_group is defined
    - crm_resource_locate_group.stdout_lines | length > 1
  run_once: true

- name: Wait for the volume to be available on the node
  shell: fdisk -l {{ virtio_id_devices | regex_replace(',', ' ') }}
  register: fdisk_volumes
  until: fdisk_volumes.stderr_lines | length == 0
  retries: 60
  delay: 30
  when:
    - item.fstype != "tmpfs"
    - crm_resource_locate_group.stdout.find(ansible_hostname) > -1

- name: LV create "{{ ha_storage.volume_group }}/{{ item.lv }}"
  lvol: vg={{ ha_storage.volume_group }} lv={{ item.lv }} size={{ item.size }} opts="-m{{ lvm_mirors }}"
  when:
    - item.fstype != "tmpfs"
    - crm_resource_locate_group.stdout.find(ansible_hostname) > -1

- name: Cleanup the resource group
  shell: pcs resource cleanup g-{{ ha_storage.volume_group }}
  when: crm_resource_locate_group.stdout.find("NOT") > -1

- name: LV mkfs "{{ ha_storage.volume_group }}/{{ item.lv }}"
  filesystem: fstype={{ item.fstype | default(ha_storage_fs) }} dev=/dev/{{ ha_storage.volume_group }}/{{ item.lv }}
  when:
    - item.fstype != "tmpfs"
    - crm_resource_locate_group.stdout.find(ansible_hostname) > -1

- name: Check group configuration "g-{{ ha_storage.volume_group }}"
  shell: pcs resource show g-{{ ha_storage.volume_group }} | fgrep Resource
  register: pcs_group_conf

- name: Create primitive "{{ ha_storage.volume_group }}-{{ item.lv }}"
  shell: >
    pcs resource create "{{ ha_storage.volume_group }}-{{ item.lv }}" ocf:heartbeat:Filesystem \
        directory="{{ item.mountpoint }}" \
        device="/dev/{{ ha_storage.volume_group }}/{{ item.lv }}" \
        fstype="{{ item.fstype }}" \
        {% if item.options is defined and item.options | length > 0 %}options="{{ item.options }}" {% endif %} \
        op monitor timeout=40 interval=20 \
        op start timeout=60 interval=0 \
        op stop timeout=60 interval=0 \
        --group g-{{ ha_storage.volume_group }}
  when:
    - pcs_group_conf.stdout.find(item.lv) < 0

- name: Create primitive "{{ ha_storage.volume_group }}-{{ item.lv }}-postmount"
  shell: >
    pcs resource create "{{ ha_storage.volume_group }}-{{ item.lv }}-postmount" systemd:postmount-{{ ha_storage.volume_group }}-{{ item.lv }} \
        --group g-{{ ha_storage.volume_group }}
  when:
    - pcs_group_conf.stdout.find(item.lv) < 0

- name: Check "{{ ha_storage.volume_group }}-vg"
  shell: crm_resource --locate --resource "{{ ha_storage.volume_group }}-vg"
  register: crm_resource_locate_vg
  run_once: true

- name: Cleanup "{{ ha_storage.volume_group }}-vg"
  shell: pcs resource cleanup {{ ha_storage.volume_group }}-vg
  when: crm_resource_locate_vg.stdout.find('NOT') > -1
  run_once: true

# Set mountpoints' permissions on the other nodes
#- import_tasks: ../ha-storage_post_install_mountpoints_acls.yml
